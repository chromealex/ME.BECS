namespace ME.BECS.Jobs {
    
    using static Cuts;
    using Unity.Jobs;
    using Unity.Jobs.LowLevel.Unsafe;
    using Unity.Collections.LowLevel.Unsafe;
    using Unity.Burst;

    [JobProducerType(typeof(JobAspectsComponentsExtensions{{PREFIX}}.JobProcess<{count[,]}>))]
    public interface IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> : IJobForAspectsComponentsBase {countAspects( )[where A#i# : unmanaged, IAspect]} {countComponents( )[where C#i# : unmanaged, IComponentBase]} {
        void Execute(in JobInfo jobInfo, in Ent ent, {countAspects(,)[{{inref}} A#i# a#i#]}, {countComponents(,)[{{inref}} C#i# c#i#]});
    }

    public static unsafe partial class QueryAspectsComponentsScheduleExtensions{{PREFIX}} {
        
        public static JobHandle Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(this QueryBuilder builder, in T job = default) where T : struct, IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> {countAspects( )[where A#i# : unmanaged, IAspect]} {countComponents( )[where C#i# : unmanaged, IComponentBase]} {
            {countAspects( )[builder.WithAspect<A#i#>();]}
            {countComponents( )[builder.With<C#i#>();]}
            builder.commandBuffer.ptr->SetBuilder(ref builder);
            builder.builderDependsOn = job.Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(builder.commandBuffer.ptr, builder.isUnsafe, builder.isReadonly, builder.parallelForBatch, builder.scheduleMode, builder.builderDependsOn);
            return builder.builderDependsOn;
        }
        
        public static JobHandle Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(this Query staticQuery, in T job, in SystemContext context) where T : struct, IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> {countAspects( )[where A#i# : unmanaged, IAspect]} {countComponents( )[where C#i# : unmanaged, IComponentBase]} {
            return staticQuery.Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(in job, in context.world, context.dependsOn);
        }
        
        public static JobHandle Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(this Query staticQuery, in T job, in World world, JobHandle dependsOn = default) where T : struct, IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> {countAspects( )[where A#i# : unmanaged, IAspect]} {countComponents( )[where C#i# : unmanaged, IComponentBase]} {
            var state = world.state;
            var query = API.MakeStaticQuery(QueryContext.Create(state, world.id), dependsOn).FromQueryData(state, world.id, state.ptr->queries.GetPtr(state, staticQuery.id));
            return query.Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(in job);
        }

        public static JobHandle Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(this QueryBuilderDisposable staticQuery, in T job) where T : struct, IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> {countAspects( )[where A#i# : unmanaged, IAspect]} {countComponents( )[where C#i# : unmanaged, IComponentBase]} {
            staticQuery.builderDependsOn = job.Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(staticQuery.commandBuffer.ptr, staticQuery.isUnsafe, staticQuery.isReadonly, staticQuery.parallelForBatch, staticQuery.scheduleMode, staticQuery.builderDependsOn);
            staticQuery.builderDependsOn = staticQuery.Dispose(staticQuery.builderDependsOn);
            return staticQuery.builderDependsOn;
        }
        
    }
    
    public static partial class EarlyInit {
        public static void DoAspectsComponents{{PREFIX}}<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>()
                {countAspects( )[where A#i# : unmanaged, IAspect]}
                {countComponents( )[where C#i# : unmanaged, IComponentBase]}
                where T : struct, IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> => JobAspectsComponentsExtensions{{PREFIX}}.JobEarlyInitialize<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>();
    }

    public static unsafe partial class JobAspectsComponentsExtensions{{PREFIX}} {
        
        public static void JobEarlyInitialize<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>()
            {countAspects( )[where A#i# : unmanaged, IAspect]}
            {countComponents( )[where C#i# : unmanaged, IComponentBase]}
            where T : struct, IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> => JobProcess<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>.Initialize();

        [CodeGeneratorIgnore]
        public static JobHandle Schedule<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>(this T jobData, CommandBuffer* buffer, bool unsafeMode, bool isReadonly, uint innerLoopBatchCount, ScheduleMode scheduleMode, JobHandle dependsOn = default)
            {countAspects( )[where A#i# : unmanaged, IAspect]}
            {countComponents( )[where C#i# : unmanaged, IComponentBase]}
            where T : struct, IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> {
            
            var jobInfo = JobInfo.Create(buffer->worldId);
            dependsOn = JobStaticInfo<T>.SchedulePatch(ref jobInfo, buffer, scheduleMode, dependsOn);
            
            buffer->sync = true;
            var flags = ScheduleFlags.Single;
            if (scheduleMode == ScheduleMode.Parallel) {
                
                flags |= ScheduleFlags.Parallel;
                
                buffer->sync = false;
                            
                if (innerLoopBatchCount == 0u) innerLoopBatchCount = JobUtils.GetScheduleBatchCount<T>(buffer->count);

            }
            
            if (isReadonly == true) flags |= ScheduleFlags.IsReadonly;
              
            void* data = null;
            var reflectionData = JobReflectionData<T>.data.Data;
            #if ENABLE_UNITY_COLLECTIONS_CHECKS && ENABLE_BECS_COLLECTIONS_CHECKS
            if (unsafeMode == true) {
                reflectionData = JobReflectionUnsafeData<T>.data.Data;
            }
            #endif
            
            JobInject<T>.Patch(ref jobData, buffer->worldId);
            
            #if ENABLE_UNITY_COLLECTIONS_CHECKS && ENABLE_BECS_COLLECTIONS_CHECKS
            E.IS_NULL(reflectionData, "Job is not created. Make sure the job is public.");
            data = CompiledJobs<T>.Get(_addressPtr(ref jobData), buffer, unsafeMode, flags, in jobInfo);
            var parameters = new JobsUtility.JobScheduleParameters(data, reflectionData, dependsOn, scheduleMode);
            #else
            var dataVal = new JobData<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>() {
                scheduleFlags = flags,
                jobData = jobData,
                jobInfo = jobInfo,
                buffer = buffer,
                {countAspects[a#i# = buffer->state.ptr->aspectsStorage.Initialize<A#i#>(buffer->state),]}
                {countComponents[c#i# = buffer->state.ptr->components.Get{{RWRO}}<C#i#>(buffer->state, buffer->worldId),]}
            };
            data = _addressPtr(ref dataVal);
            var parameters = new JobsUtility.JobScheduleParameters(data, reflectionData, dependsOn, scheduleMode);
            #endif
            
            if (scheduleMode == ScheduleMode.Parallel) {
                return JobsUtility.ScheduleParallelForDeferArraySize(ref parameters, (int)innerLoopBatchCount, (byte*)buffer, null);
            }
            return JobsUtility.Schedule(ref parameters);
            
        }

        private struct JobData<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>
            {countAspects( )[where A#i# : unmanaged, IAspect]}
            {countComponents( )[where C#i# : unmanaged, IComponentBase]}
            where T : struct {
            public ScheduleFlags scheduleFlags;
            public JobInfo jobInfo;
            [NativeDisableUnsafePtrRestriction]
            public T jobData;
            [NativeDisableUnsafePtrRestriction]
            public CommandBuffer* buffer;
            {countAspects[public A#i# a#i#;]}
            {countComponents[public Ref{{RWRO}}<C#i#> c#i#;]}
        }

        internal struct JobProcess<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>
            {countAspects( )[where A#i# : unmanaged, IAspect]}
            {countComponents( )[where C#i# : unmanaged, IComponentBase]}
            where T : struct, IJobFor{{countAspects}}Aspects{{countComponents}}Components<{countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> {

            [BurstDiscard]
            public static void Initialize() {
                if (JobReflectionData<T>.data.Data == System.IntPtr.Zero) {
                    #if ENABLE_UNITY_COLLECTIONS_CHECKS && ENABLE_BECS_COLLECTIONS_CHECKS
                    JobReflectionData<T>.data.Data = JobsUtility.CreateJobReflectionData(CompiledJobs<T>.GetJobType(false), typeof(T), (ExecuteJobFunction)Execute);
                    JobReflectionUnsafeData<T>.data.Data = JobsUtility.CreateJobReflectionData(CompiledJobs<T>.GetJobType(true), typeof(T), (ExecuteJobFunction)Execute);
                    #else
                    JobReflectionData<T>.data.Data = JobsUtility.CreateJobReflectionData(typeof(JobData<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}>), typeof(T), (ExecuteJobFunction)Execute);
                    #endif
                }
            }

            private delegate void ExecuteJobFunction(ref JobData<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> jobData, System.IntPtr bufferPtr, System.IntPtr bufferRangePatchData, ref JobRanges ranges, int jobIndex);

            private static void Execute(ref JobData<T, {countAspects(,)[A#i#]}, {countComponents(,)[C#i#]}> jobData, System.IntPtr bufferPtr, System.IntPtr bufferRangePatchData, ref JobRanges ranges, int jobIndex) {

                var jobInfo = jobData.jobInfo;
                jobInfo.CreateLocalCounter();
                jobInfo.count = jobData.buffer->count;
                {countAspects[var aspect#i# = jobData.a#i#;]}
                
                JobStaticInfo<T>.lastCount = jobInfo.count;
                
                if ((jobData.scheduleFlags & ScheduleFlags.IsReadonly) != 0) {
                    if ((jobData.scheduleFlags & ScheduleFlags.Parallel) != 0) {
                        while (JobsUtility.GetWorkStealingRange(ref ranges, jobIndex, out var begin, out var end) == true) {
                            jobData.buffer->BeginForEachRange((uint)begin, (uint)end);
                            for (uint i = (uint)begin; i < end; ++i) {
                                jobInfo.index = i;
                                jobInfo.ResetLocalCounter();
                                var entId = *(jobData.buffer->entities + i);
                                var gen = Ents.GetGeneration(jobData.buffer->state, entId);
                                var ent = new Ent(entId, gen, jobData.buffer->worldId);
                                {countAspects[aspect#i#.ent = ent;]}
                                jobData.jobData.Execute(in jobInfo, in ent, {countAspects(,)[{{inref}} aspect#i#]}, {countComponents(,)[{{inref}} jobData.c#i#.{{GetRead}}Readonly(ent.id, ent.gen)]});
                            }
                            jobData.buffer->EndForEachRange();
                        }
                        Batches.ApplyThread(jobData.buffer->state);
                    } else {
                        jobData.buffer->SetEntities(jobData.buffer);
                        jobInfo.count = jobData.buffer->count;
                        JobUtils.SetCurrentThreadAsSingle(true);
                        jobData.buffer->BeginForEachRange(0u, jobData.buffer->count);
                        for (uint i = 0u; i < jobData.buffer->count; ++i) {
                            jobInfo.index = i;
                            jobInfo.ResetLocalCounter();
                            var entId = *(jobData.buffer->entities + i);
                            var gen = Ents.GetGeneration(jobData.buffer->state, entId);
                            var ent = new Ent(entId, gen, jobData.buffer->worldId);
                            {countAspects[aspect#i#.ent = ent;]}
                            jobData.jobData.Execute(in jobInfo, in ent, {countAspects(,)[{{inref}} aspect#i#]}, {countComponents(,)[{{inref}} jobData.c#i#.{{GetRead}}Readonly(ent.id, ent.gen)]});
                        }
                        jobData.buffer->EndForEachRange();
                        JobUtils.SetCurrentThreadAsSingle(false);
                        Batches.ApplyThread(jobData.buffer->state);
                    }
                } else {
                    if ((jobData.scheduleFlags & ScheduleFlags.Parallel) != 0) {
                        while (JobsUtility.GetWorkStealingRange(ref ranges, jobIndex, out var begin, out var end) == true) {
                            jobData.buffer->BeginForEachRange((uint)begin, (uint)end);
                            for (uint i = (uint)begin; i < end; ++i) {
                                jobInfo.index = i;
                                jobInfo.ResetLocalCounter();
                                var entId = *(jobData.buffer->entities + i);
                                var gen = Ents.GetGeneration(jobData.buffer->state, entId);
                                var ent = new Ent(entId, gen, jobData.buffer->worldId);
                                {countAspects[aspect#i#.ent = ent;]}
                                jobData.jobData.Execute(in jobInfo, in ent, {countAspects(,)[{{inref}} aspect#i#]}, {countComponents(,)[{{inref}} jobData.c#i#.{{GetRead}}(ent.id, ent.gen)]});
                            }
                            jobData.buffer->EndForEachRange();
                        }
                        Batches.ApplyThread(jobData.buffer->state);
                    } else {
                        jobData.buffer->SetEntities(jobData.buffer);
                        jobInfo.count = jobData.buffer->count;
                        JobUtils.SetCurrentThreadAsSingle(true);
                        jobData.buffer->BeginForEachRange(0u, jobData.buffer->count);
                        for (uint i = 0u; i < jobData.buffer->count; ++i) {
                            jobInfo.index = i;
                            jobInfo.ResetLocalCounter();
                            var entId = *(jobData.buffer->entities + i);
                            var gen = Ents.GetGeneration(jobData.buffer->state, entId);
                            var ent = new Ent(entId, gen, jobData.buffer->worldId);
                            {countAspects[aspect#i#.ent = ent;]}
                            jobData.jobData.Execute(in jobInfo, in ent, {countAspects(,)[{{inref}} aspect#i#]}, {countComponents(,)[{{inref}} jobData.c#i#.{{GetRead}}(ent.id, ent.gen)]});
                        }
                        jobData.buffer->EndForEachRange();
                        JobUtils.SetCurrentThreadAsSingle(false);
                        Batches.ApplyThread(jobData.buffer->state);
                    }
                }
                
            }
        }
    }
    
}